/**
 * 
 */
package qrmanager.dev;

import java.io.FileNotFoundException;
import java.io.IOException;

import org.json.simple.parser.ParseException;

import java.util.*;

/**
 * @author Roberto Fernandez 
 *
 */
public class QRManager implements SerialPortListener{
	// Class attributes
	private static ReadConfig myReadConfig = new ReadConfig();
	private static List<QRManagerDTO> myQRMDTO = new ArrayList<QRManagerDTO>();
	// Instance attributes
	private RxTxSerialPort myQRReader;
	private DigitalIOInterface myDio;
	private int doChannel;
	private String myName;

	/** Constructor 
	 * @throws Exception */
	QRManager(String name, String portName, int speed, int doChannel) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("QRManager: name = " + name + ", portName = " + portName + ", speed = " + speed + ", doChannel = " + doChannel);
		
		/** Create RxTxReaderSerialPort */
		setMyQRReader(new RxTxSerialPort(portName, speed, this));
		System.out.println("QR reader serial port interface created");
		
		// Save the digital output channel bound to this QRManager instance
		this.doChannel = doChannel;
		
		// Name to identify this QRManager instance
		this.myName = name;
		
		/** Get digital output interface singleton instance */
		setMyDio(DigitalSerialIOImpl.getInstance());
		System.out.println("Digital output interface singleton gotten");
	}

	/** This listener method is invoked by our QRReaderSerialPort
	 *  instance when a new QR has been read from serial port 
	 */
	public void dataReceived(String qr) {
		// TODO Auto-generated method stub
		System.out.println(" <<<<" + this.myName + " qr read = " + qr);
		
		// Validate if QR matches Anahuac JSON structure
		
		// If QR valid, trigger momentary corresponding DO output
		// in order to open lane barrier
		this.getMyDio().setOutputOn(myName, doChannel); 
		try {
			Thread.sleep(500); // TODO: take from configuration
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		this.getMyDio().setOutputOff(myName, doChannel);
	}

	public void setMyDio(DigitalIOInterface dio) {
		this.myDio = dio;
	}
	
	public DigitalIOInterface getMyDio() {
		return myDio;
	}

	public void setMyQRReader(RxTxSerialPort myQRReader) {
		this.myQRReader = myQRReader;
	}
	
	public RxTxSerialPort getMyQRReader() {
		return myQRReader;
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			myQRMDTO = myReadConfig.getConfig("../qrmanager_conf.json");
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			// QR Reader in serial COM3, digital output channel is 2
			QRManager qrm1 = new QRManager("Carril 1", "COM3", 115200, 2);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("QRMManager with parameters Carril 1, portName = COM3, speed = 115200 and doChannel = 2 created");

		try {
			// QR Reader in serial COM4, digital output channel is 3
			QRManager qrm2 = new QRManager("Carril 2", "COM6", 115200, 3);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("QRMManager with parameters Carril 2, portName = COM6, speed = 115200 and doChannel = 3 created");
		
		try {
			// QR Reader in serial COM8, digital output channel is 4
			QRManager qrm2 = new QRManager("Carril 3", "COM8", 115200, 4);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("QRMManager with parameters Carril 3, portName = COM8, speed = 115200 and doChannel = 4 created");		
	}
}
