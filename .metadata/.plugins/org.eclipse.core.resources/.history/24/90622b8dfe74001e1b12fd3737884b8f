/**
 * 
 */
package qrmanager.dev;

/**
 * 
 * This is a singleton class to manage digital outputs
 * via serial port.
 * 
 * @author Roberto Fernandez 
 *
 */
public class DigitalSerialIOImpl implements DigitalIOInterface, SerialPortListener{
	private static DigitalSerialIOImpl myInstance = null;
	private static String portName;
	private static int speed; 
	private RxTxSerialPort mySerialPort;
	
	public static DigitalSerialIOImpl getInstance() throws Exception {
		if (myInstance == null) {
			myInstance = new DigitalSerialIOImpl(portName, speed);
		}
		return myInstance;
	}
	/** Constructor 
	 * @throws Exception */
	private DigitalSerialIOImpl(String portName, int speed) throws Exception {
		// Read digitaloutput configuration and use it to instantiate serial port accordingly
		ReadConfig conf = new ReadConfig();
		DoDTO dto = conf.getDigitalOutput(Constants.CONF_FILE_PATH_DEFAULT);
		mySerialPort = new RxTxSerialPort(dto.getPortName(), dto.getSpeed(), this);
	}

	/** setOutputOn */
	public synchronized int setOutputOn(String name, int channel) {
		// TODO Auto-generated method stub
		String cmdString;
		
		// Add output channel to string
		cmdString = Integer.toString(channel)+"-1;";
		System.out.println(name + ": setOutputOn = " + cmdString);
		// Get byte array from string and send it out to serial USB to 
		// digital output controller
		mySerialPort.sendBytes(cmdString.getBytes());
		return 0;
	}

	/** setOutputOff */
	public synchronized int setOutputOff(String name, int channel) {
		// TODO Auto-generated method stub
		String cmdString;
		
		// Add output channel to string
		cmdString = Integer.toString(channel)+"-0;";
		System.out.println(name + ": setOutputOff = " + cmdString);
		// Get byte array from string and send it out to serial USB to 
		// digital output controller
		mySerialPort.sendBytes(cmdString.getBytes());
		return 0;		
	}
	public void dataReceived(String qr) {
		// TODO Auto-generated method stub
		System.out.println(" <<<< DigitalSerialIOImpl:" + this + " serial read = " + qr);
	}

}
