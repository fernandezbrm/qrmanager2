/**
 * 
 */
package qrmanager.dev;

import java.io.FileNotFoundException;
import java.io.IOException;

import org.json.simple.parser.ParseException;

import java.util.*;

/**
 * @author Roberto Fernandez 
 *
 */
public class QRManager implements SerialPortListener{
	// Class attributes
	private static ReadConfig myReadConfig = new ReadConfig();
	private static List<QRManagerDTO> myQRMDTO = new ArrayList<QRManagerDTO>();
	// Instance attributes
	private RxTxSerialPort myQRReader;
	private DigitalIOInterface myDio;
	private int doChannel;
	private String myName;

	/** Constructor 
	 * @throws Exception */
	QRManager(String name, String portName, int speed, int doChannel) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("QRManager: name = " + name + ", portName = " + portName + ", speed = " + speed + ", doChannel = " + doChannel);
		
		/** Create RxTxReaderSerialPort */
		setMyQRReader(new RxTxSerialPort(portName, speed, this));
		System.out.println("QR reader serial port interface created");
		
		// Save the digital output channel bound to this QRManager instance
		this.doChannel = doChannel;
		
		// Name to identify this QRManager instance
		this.myName = name;
		
		/** Get digital output interface singleton instance */
		setMyDio(DigitalSerialIOImpl.getInstance());
		System.out.println("Digital output interface singleton gotten");
	}

	/** This listener method is invoked by our QRReaderSerialPort
	 *  instance when a new QR has been read from serial port 
	 */
	public void dataReceived(String qr) {
		// TODO Auto-generated method stub
		System.out.println(" <<<<" + this.myName + " qr read = " + qr);
		
		// Validate if QR matches Anahuac JSON structure
		
		// If QR valid, trigger momentary corresponding DO output
		// in order to open lane barrier
		this.getMyDio().setOutputOn(myName, doChannel); 
		try {
			Thread.sleep(500); // TODO: take from configuration
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		this.getMyDio().setOutputOff(myName, doChannel);
	}

	public void setMyDio(DigitalIOInterface dio) {
		this.myDio = dio;
	}
	
	public DigitalIOInterface getMyDio() {
		return myDio;
	}

	public void setMyQRReader(RxTxSerialPort myQRReader) {
		this.myQRReader = myQRReader;
	}
	
	public RxTxSerialPort getMyQRReader() {
		return myQRReader;
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			// Read configuration file
			myQRMDTO = myReadConfig.getQrManagers("../qrmanager_conf.json");
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return;
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return;
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			return;
		}
		
		for (int i = 0; i < myQRMDTO.size(); i++) {
			try {
				// Create QRManager instance based in configuration
				QRManager qrm = new QRManager(myQRMDTO.get(i).getName(), 
											  myQRMDTO.get(i).getPortName(), 
											  myQRMDTO.get(i).getSpeed(), 
											  myQRMDTO.get(i).getDoChannel());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println("-------------------------------" +
								"QRManager instance with parameters " + 
								"name = " + myQRMDTO.get(i).getName() + 
								", portName = " + myQRMDTO.get(i).getPortName() + 
								", speed = " + myQRMDTO.get(i).getSpeed() +  
								" and doChannel = " + myQRMDTO.get(i).getDoChannel() +  " created");
		}
	}
}
